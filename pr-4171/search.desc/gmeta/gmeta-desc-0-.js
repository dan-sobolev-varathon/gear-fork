searchState.loadedDescShard("gmeta", 0, "Crate for providing metadata for Gear programs.\nAssemblyScript language.\nError that can occur during encoding/decoding.\nError that can occur during hex decoding.\nHandle message type.\nType alias for incoming message type without any outgoing …\nType alias for incoming/outgoing message types.\nInit message type.\nInput type.\nError that can occur during metadata parsing.\nLanguage identifier.\nA metatype abstraction.\nTrait used for defining metadata.\nError that can occur during metadata parsing.\nMetadata internal representation.\nMetawasm data.\nMessage types for miscellaneous purposes.\nType alias for outgoing message type without any incoming …\nOutput type.\nA read-only registry containing types in their portable …\nThe registry for space-efficient storage of type …\nReply message type.\nRust language.\nSignal message type.\nState type.\nTrait used to get information about types.\nTrait used for registering types in registry.\nTypes representation used by metadata.\nError that can occur when trying to parse metadata …\nError that can occur when trying to parse metadata with …\nEncode metadata into bytes using codec.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecode metadata from bytes using codec.\nDecode metadata from hex.\nMeta functions.\nInternal representation for <code>Metadata::Handle</code> type.\nCalculate BLAKE2b hash of metadata bytes.\nCalculate BLAKE2b hash of metadata and encode it into hex …\nEncode metadata into hex string.\nInternal representation for <code>Metadata::Init</code> type.\nInput types.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if type is unit.\nConverts an iterator into a Vec of the equivalent portable …\nCreate <code>MetaType</code> information about type.\nCreates a new meta type from the given compile-time known …\nCreates a new empty registry.\nInternal representation for <code>Metadata::Others</code> type.\nOutput types.\nRegister type in the registry and return its identifier if …\nRegister input/output types in registry.\nRegisters the given type into the registry and returns its …\nCalls <code>register_type</code> for each <code>MetaType</code> in the given <code>iter</code>.\nEncoded registry of types.\nRegistry.\nInternal representation for <code>Metadata::Reply</code> type.\nCreate metadata representation and register types in …\nReturns the type definition for the given identifier, <code>None</code> …\nRetains only the portable types needed to express the …\nInternal representation for <code>Metadata::Signal</code> type.\nInternal representation for <code>Metadata::State</code> type.\nReturns the type identifier provided by <code>core::any</code>.\nReturns the meta type information.\nReturns an iterator over the types with their keys\nReturns all types with their associated identifiers.\nThe types contained by the <code>PortableRegistry</code>.")