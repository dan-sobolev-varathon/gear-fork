searchState.loadedDescShard("gclient", 2, "The version of the call operator that takes a by-value …\nUsed to specify which residuals can be converted into …\nAn inclusive bound.\nUsed for indexing operations (<code>container[index]</code>) in …\nUsed for indexing operations (<code>container[index]</code>) in mutable …\nThe multiplication operator <code>*</code>.\nThe multiplication assignment operator <code>*=</code>.\nThe unary negation operator <code>-</code>.\nThe unary logical negation operator <code>!</code>.\n<code>OneSidedRange</code> is implemented for built-in range types that …\nThe resulting type after applying the <code>+</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nThe resulting type after applying the <code>-</code> operator.\nOutput type of the called closure’s future.\nThe resulting type after applying the <code>!</code> operator.\nThe returned type after the call operator is used.\nThe type of the value produced by <code>?</code> when <em>not</em> …\nThe resulting type after applying the <code>*</code> operator.\nThe resulting type after applying the <code>/</code> operator.\nThe resulting type after applying the <code>%</code> operator.\nThe resulting type after applying the <code>&amp;</code> operator.\nThe resulting type after applying the <code>|</code> operator.\nThe resulting type after applying the <code>^</code> operator.\nThe resulting type after applying the <code>&lt;&lt;</code> operator.\nThe resulting type after applying the <code>&gt;&gt;</code> operator.\nThe returned type after indexing.\nA (half-open) range bounded inclusively below and …\n<code>RangeBounds</code> is implemented by Rust’s built-in range …\nA range only bounded inclusively below (<code>start..</code>).\nAn unbounded range (<code>..</code>).\nA range bounded inclusively below and above (<code>start..=end</code>).\nA range only bounded exclusively above (<code>..end</code>).\nA range only bounded inclusively above (<code>..=end</code>).\nThe remainder operator <code>%</code>.\nThe remainder assignment operator <code>%=</code>.\nAllows retrieving the canonical type implementing <code>Try</code> that …\nThe type of the value passed to <code>FromResidual::from_residual</code>\nThe type of value this coroutine returns.\nThe left shift operator <code>&lt;&lt;</code>. Note that because this trait …\nThe left shift assignment operator <code>&lt;&lt;=</code>.\nThe right shift operator <code>&gt;&gt;</code>. Note that because this trait …\nThe right shift assignment operator <code>&gt;&gt;=</code>.\nThe subtraction operator <code>-</code>.\nThe subtraction assignment operator <code>-=</code>.\nThe resulting type after dereferencing.\nThe <code>?</code> operator and <code>try {}</code> blocks.\nThe “return” type of this meta-function.\nAn infinite endpoint. Indicates that there is no bound in …\nImplement <code>FromResidual&lt;Yeet&lt;T&gt;&gt;</code> on your type to enable …\nThe type of value this coroutine yields.\nThe coroutine suspended with a value.\nPerforms the <code>+</code> operation.\nPerforms the <code>+=</code> operation.\nConverts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.\nConverts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.\nCall the <code>AsyncFn</code>, returning a future which may borrow from …\nCall the <code>AsyncFnMut</code>, returning a future which may borrow …\nCall the <code>AsyncFnOnce</code>, returning a future which may move …\nPerforms the <code>&amp;</code> operation.\nPerforms the <code>&amp;=</code> operation.\nPerforms the <code>|</code> operation.\nPerforms the <code>|=</code> operation.\nPerforms the <code>^</code> operation.\nPerforms the <code>^=</code> operation.\nUsed in <code>?</code> to decide whether the operator should produce a …\nConverts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …\nPerforms the call operation.\nPerforms the call operation.\nPerforms the call operation.\nMap a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nReturns <code>true</code> if <code>item</code> is contained in the range.\nConverts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …\nDereferences the value.\nMutably dereferences the value.\nPerforms the <code>/</code> operation.\nPerforms the <code>/=</code> operation.\nExecutes the destructor for this type.\nSCALE encode this type to bytes, possibly with the help of …\nSCALE encode this type to bytes, possibly with the help of …\nReturns the upper bound of the range (inclusive).\nThe upper bound of the range (exclusive).\nThe upper bound of the range (exclusive).\nThe upper bound of the range (inclusive)\nEnd index bound.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstructs the type from its <code>Output</code> type.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nConstructs the type from a compatible <code>Residual</code> type.\nPerforms the indexing (<code>container[index]</code>) operation.\nPerforms the mutable indexing (<code>container[index]</code>) operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestructures the <code>RangeInclusive</code> into (lower bound, upper …\nReturns <code>true</code> if this is a <code>Break</code> variant.\nReturns <code>true</code> if this is a <code>Continue</code> variant.\nReturns <code>true</code> if the range contains no items.\nReturns <code>true</code> if the range contains no items.\nMaps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …\nMaps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;T, C&gt;</code> by applying a …\nMaps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;B, T&gt;</code> by applying a …\nPerforms the <code>*</code> operation.\nPerforms the <code>*=</code> operation.\nPerforms the unary <code>-</code> operation.\nCreates a new inclusive range. Equivalent to writing …\nPerforms the unary <code>!</code> operation.\nPerforms the <code>%</code> operation.\nPerforms the <code>%=</code> operation.\nResumes the execution of this coroutine.\nPerforms the <code>&lt;&lt;</code> operation.\nPerforms the <code>&lt;&lt;=</code> operation.\nPerforms the <code>&gt;&gt;</code> operation.\nPerforms the <code>&gt;&gt;=</code> operation.\nReturns the lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nThe lower bound of the range (inclusive).\nStart index bound.\nPerforms the <code>-</code> operation.\nPerforms the <code>-=</code> operation.\nA pointer type that uniquely owns a heap allocation of …\nA common trait for the ability to explicitly duplicate an …\nDerive macro generating an impl of the trait <code>Clone</code>.\nTrait for comparisons corresponding to equivalence …\nDerive macro generating an impl of the trait <code>Eq</code>.\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe resulting type after obtaining ownership.\nTrait for comparisons using the equality operator.\nDerive macro generating an impl of the trait <code>PartialEq</code>. …\nA helper struct for reverse ordering.\nA generalization of <code>Clone</code> to borrowed data.\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nReturns a reference to the underlying allocator.\nConverts to <code>Box&lt;T, A&gt;</code>.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nReturns a copy of the value.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nPerforms copy-assignment from <code>source</code>.\nUses borrowed data to replace owned data, usually by …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nSCALE encode this type to bytes, possibly with the help of …\nTests for <code>self</code> and <code>other</code> values to be equal, and is used …\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nCreates a boxed <code>Path</code> from a reference.\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nReturns the argument unchanged.\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nConverts a vector into a boxed slice.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nGet a mutable reference to the inner from the outer.\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConsumes the <code>Box</code>, returning the wrapped value.\nCreates an iterator from a value.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nTests for <code>!=</code>. The default implementation is almost always …\nAllocates memory on the heap and then places <code>x</code> into it.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nCreates owned data from borrowed data, usually by cloning.\nAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nUnlike <code>Vec</code>, <code>Box&lt;[Z]&gt;</code> cannot reallocate, so we can be sure …\nContains the error value\nAn iterator over the value in a <code>Ok</code> variant of a <code>Result</code>.\nAn iterator over a reference to the <code>Ok</code> variant of a <code>Result</code>.\nAn iterator over a mutable reference to the <code>Ok</code> variant of …\nContains the success value\n<code>Result</code> is a type that represents either success (<code>Ok</code>) or …\nReturns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nCalls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …\nConverts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …\nConverts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.\nConverts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …\nMaps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nMaps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …\nSCALE encode this type to bytes, possibly with the help of …\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value.\nConverts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls a function with a reference to the contained value …\nCalls a function with a reference to the contained value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the contained <code>Err</code> value, but never panics.\nReturns a consuming iterator over the possibly contained …\nReturns the contained <code>Ok</code> value, but never panics.\nReturns <code>true</code> if the result is <code>Err</code>.\nReturns <code>true</code> if the result is <code>Err</code> and the value inside of …\nReturns <code>true</code> if the result is <code>Ok</code>.\nReturns <code>true</code> if the result is <code>Ok</code> and the value inside of …\nReturns an iterator over the possibly contained value.\nReturns a mutable iterator over the possibly contained …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …\nReturns the provided default (if <code>Err</code>), or applies a …\nMaps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function …\nConverts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.\nReturns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nCalls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nTakes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …\nTransposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value.\nReturns the contained <code>Err</code> value, consuming the <code>self</code> value, …\nReturns the contained <code>Ok</code> value or a provided default.\nReturns the contained <code>Ok</code> value or a default\nReturns the contained <code>Ok</code> value or computes it from a …\nReturns the contained <code>Ok</code> value, consuming the <code>self</code> value, …\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nA barrier enables multiple threads to synchronize the …\nA <code>BarrierWaitResult</code> is returned by <code>Barrier::wait()</code> when …\nA Condition Variable\nContains the error value\nContains the error value\n<code>Exclusive</code> provides only <em>mutable</em> access, also referred to …\nA value which is initialized on the first access.\nA type alias for the result of a lock method which can be …\nAn RAII mutex guard returned by <code>MutexGuard::map</code>, which can …\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nA mutual exclusion primitive useful for protecting shared …\nAn RAII implementation of a “scoped lock” of a mutex. …\nInitialization value for static <code>Once</code> values.\nContains the success value\nContains the success value\nA low-level synchronization primitive for one-time global …\nA synchronization primitive which can nominally be written …\nState yielded to <code>Once::call_once_force()</code>’s closure …\nA type of error which can be returned whenever a lock is …\nThe lock could not be acquired because another thread …\nA re-entrant mutual exclusion lock\nAn RAII implementation of a “scoped lock” of a …\nA reader-writer lock\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nAn enumeration of possible errors associated with a …\nA type alias for the result of a nonblocking locking …\nA type indicating whether a timed wait on a condition …\n<code>Weak</code> is a version of <code>Arc</code> that holds a non-owning reference …\nThe lock could not be acquired at this time because the …\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nProvides a raw pointer to the data.\nReturns a raw pointer to the object <code>T</code> pointed to by this …\nConverts to <code>Arc&lt;[T]&gt;</code>.\nConverts to <code>Arc&lt;T&gt;</code>.\nAtomic types\nPerforms an initialization routine once and only once. The …\nPerforms the same function as <code>call_once()</code> except ignores …\nClear the poisoned state from a mutex.\nClear the poisoned state from a lock.\nMakes a clone of the <code>Arc</code> pointer.\nMakes a clone of the <code>Weak</code> pointer that points to the same …\nComparison for two <code>Arc</code>s.\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCreates a <code>Condvar</code> which is ready to be waited on and …\nCreates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nCreates an empty str inside an Arc\nCreates an empty CStr inside an Arc\nCreates an empty <code>[T]</code> inside an Arc\nCreates a new lazy value using <code>Default</code> as the initializing …\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating memory. …\nCreates a <code>Mutex&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates a new empty cell.\nCreates a new <code>RwLock&lt;T&gt;</code>, with the <code>Default</code> value for T.\nDereferences the value.\nAttempts to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …\nDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …\nCreates a new <code>Weak</code> pointer to this allocation.\nDrops the <code>Arc</code>.\nDrops the <code>Weak</code> pointer.\nSCALE encode this type to bytes, possibly with the help of …\nEquality for two <code>Arc</code>s.\nForces the evaluation of this lazy value and returns a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …\nConverts an atomically reference-counted string slice into …\nAllocates a reference-counted slice and fills it by …\nCreates an atomically reference-counted pointer from a …\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …\nReturns the argument unchanged.\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …\nAllocates a reference-counted slice and moves <code>v</code>’s items …\nMove a boxed object to a new, reference-counted allocation.\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new mutex in an unlocked state ready for use. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new cell with its contents set to <code>value</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes each element in the <code>Iterator</code> and collects it into an …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nBuild a <em>mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from a <em>mutable</em>…\nGet a mutable reference to the inner from the outer.\nBuild a <em>pinned mutable</em> reference to an <code>Exclusive&lt;T&gt;</code> from a …\nConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\nConverts a raw pointer previously created by <code>into_raw</code> back …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nGets the reference to the underlying value.\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference to the underlying data.\nGets the mutable reference to the underlying value.\nReaches into this error indicating that a lock is …\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nGets exclusive access to the underlying value.\nGets the mutable reference of the contents of the cell, …\nGets the mutable reference of the contents of the cell, …\nReturns a mutable reference into the given <code>Arc</code>, without …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets the contents of the cell, initializing it with <code>f</code> if …\nGets pinned exclusive access to the underlying value.\nReaches into this error indicating that a lock is …\nGreater-than comparison for two <code>Arc</code>s.\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nConsumes this <code>LazyLock</code> returning the stored value.\nConsumes this mutex, returning the underlying data.\nConsumes the <code>OnceLock</code>, returning the wrapped value. Returns\nConsumes this error indicating that a lock is poisoned, …\nConsumes this lock, returning the underlying data.\nConsumes this <code>RwLock</code>, returning the underlying data.\nUnwrap the value contained in the <code>Exclusive</code>\nConsumes the <code>Arc</code>, returning the wrapped pointer.\nConsumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.\nConsumes the <code>Arc</code>, returning the wrapped pointer and …\nConsumes the <code>Weak&lt;T&gt;</code>, returning the wrapped pointer and …\nReturns <code>true</code> if some <code>call_once()</code> call has completed …\nReturns <code>true</code> if this thread is the “leader thread” for …\nDetermines whether the mutex is poisoned.\nReturns <code>true</code> if the associated <code>Once</code> was poisoned prior to …\nDetermines whether the lock is poisoned.\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\nAcquires a mutex, blocking the current thread until it is …\nAcquires the lock, blocking the current thread until it is …\nLess-than comparison for two <code>Arc</code>s.\nMakes a mutable reference into the given <code>Arc</code>.\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nMulti-producer, single-consumer FIFO queue communication …\nInequality for two <code>Arc</code>s.\nCreates a new barrier that can block a given number of …\nCreates a new condition variable which is ready to be …\nConstructs a new <code>Arc&lt;T&gt;</code>.\nCreates a new lazy value with the given initializing …\nConstructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …\nCreates a new mutex in an unlocked state ready for use.\nCreates a new <code>Once</code> value.\nCreates a new empty cell.\nCreates a <code>PoisonError</code>.\nCreates a new re-entrant lock in an unlocked state ready …\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nWrap a value in an <code>Exclusive</code>\nConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nConstructs a new <code>Weak&lt;T, A&gt;</code>, without allocating any …\nConstructs a new <code>Arc</code> with uninitialized contents.\nConstructs a new <code>Arc</code> with uninitialized contents in the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nWakes up all blocked threads on this condvar.\nWakes up one blocked thread on this condvar.\nPartial comparison for two <code>Arc</code>s.\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nReturns <code>true</code> if the two <code>Weak</code>s point to the same allocation …\nLocks this <code>RwLock</code> with shared read access, blocking the …\nSets the contents of this cell to <code>value</code>.\nGets the number of strong (<code>Arc</code>) pointers to this …\nGets the number of strong (<code>Arc</code>) pointers pointing to this …\nTakes the value out of this <code>OnceLock</code>, moving it back to an …\nReturns <code>true</code> if the wait was known to have timed out.\nSets the contents of this cell to <code>value</code> if the cell was …\nAttempts to acquire this lock.\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedMutexGuard</code> for a component of the borrowed …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nMakes a <code>MappedRwLockReadGuard</code> for a component of the …\nMakes a <code>MappedRwLockWriteGuard</code> for a component of the …\nConstructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …\nConstructs a new <code>Arc</code> with uninitialized contents, …\nConstructs a new <code>Arc</code> with uninitialized contents, in the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …\nAttempts to acquire this <code>RwLock</code> with shared read access.\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nAttempts to lock this <code>RwLock</code> with exclusive write access.\nIf we have the only reference to <code>T</code> then unwrap it. …\nAttempts to upgrade the <code>Weak</code> pointer to an <code>Arc</code>, delaying …\nBlocks the current thread until all threads have …\nBlocks the current thread until this condition variable …\nWaits on this condition variable for a notification, …\nWaits on this condition variable for a notification, …\nWaits on this condition variable for a notification, …\nBlocks the current thread until this condition variable …\nGets the number of <code>Weak</code> pointers to this allocation.\nGets an approximation of the number of <code>Weak</code> pointers …\nLocks this <code>RwLock</code> with exclusive write access, blocking …\nAn <code>AtomicBool</code> initialized to <code>false</code>.\nAn <code>AtomicIsize</code> initialized to <code>0</code>.\nAn <code>AtomicUsize</code> initialized to <code>0</code>.\nHas the effects of both <code>Acquire</code> and <code>Release</code> together: For …\nWhen coupled with a load, if the loaded value was written …\nA boolean type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nA raw pointer type which can be safely shared between …\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAn integer type which can be safely shared between threads.\nAtomic memory orderings\nNo ordering constraints, only atomic operations.\nWhen coupled with a store, all previous operations become …\nLike <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …\nReturns a mutable pointer to the underlying <code>bool</code>.\nReturns a mutable pointer to the underlying pointer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nReturns a mutable pointer to the underlying integer.\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the <code>bool</code> if the current value is the …\nStores a value into the pointer if the current value is …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nStores a value into the atomic integer if the current …\nA compiler memory fence.\nCreates an <code>AtomicBool</code> initialized to <code>false</code>.\nCreates a null <code>AtomicPtr&lt;T&gt;</code>.\nAn atomic fence.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nAdds to the current value, returning the previous value.\nLogical “and” with a boolean value.\nPerforms a bitwise “and” operation on the address of …\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nBitwise “and” with the current value.\nOffsets the pointer’s address by adding <code>val</code> <em>bytes</em>, …\nOffsets the pointer’s address by subtracting <code>val</code> <em>bytes</em>, …\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMaximum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nMinimum with the current value.\nLogical “nand” with a boolean value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nBitwise “nand” with the current value.\nLogical “not” with a boolean value.\nLogical “or” with a boolean value.\nPerforms a bitwise “or” operation on the address of …\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nBitwise “or” with the current value.\nOffsets the pointer’s address by adding <code>val</code> (in units of …\nOffsets the pointer’s address by subtracting <code>val</code> (in …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nSubtracts from the current value, returning the previous …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nFetches the value, and applies a function to it that …\nLogical “xor” with a boolean value.\nPerforms a bitwise “xor” operation on the address of …\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nBitwise “xor” with the current value.\nReturns the argument unchanged.\nConverts a <code>bool</code> into an <code>AtomicBool</code>.\nReturns the argument unchanged.\nConverts a <code>*mut T</code> into an <code>AtomicPtr&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i8</code> into an <code>AtomicI8</code>.\nConverts an <code>u8</code> into an <code>AtomicU8</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i16</code> into an <code>AtomicI16</code>.\nReturns the argument unchanged.\nConverts an <code>u16</code> into an <code>AtomicU16</code>.\nReturns the argument unchanged.\nConverts an <code>i32</code> into an <code>AtomicI32</code>.\nReturns the argument unchanged.\nConverts an <code>u32</code> into an <code>AtomicU32</code>.\nReturns the argument unchanged.\nConverts an <code>i64</code> into an <code>AtomicI64</code>.\nReturns the argument unchanged.\nConverts an <code>u64</code> into an <code>AtomicU64</code>.\nConverts an <code>isize</code> into an <code>AtomicIsize</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>usize</code> into an <code>AtomicUsize</code>.\nGet a mutable reference to the inner from the outer.\nGets atomic access to a <code>&amp;mut bool</code>.\nGet a mutable reference to the inner from the outer.\nGets atomic access to a pointer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut i8</code>.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut u8</code>.\nGet atomic access to a <code>&amp;mut i16</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut u16</code>.\nGet atomic access to a <code>&amp;mut i32</code>.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut u32</code>.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut i64</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut u64</code>.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut isize</code>.\nGet a mutable reference to the inner from the outer.\nGet atomic access to a <code>&amp;mut usize</code>.\nGets atomic access to a <code>&amp;mut [bool]</code> slice.\nGets atomic access to a slice of pointers.\nGet atomic access to a <code>&amp;mut [i8]</code> slice.\nGet atomic access to a <code>&amp;mut [u8]</code> slice.\nGet atomic access to a <code>&amp;mut [i16]</code> slice.\nGet atomic access to a <code>&amp;mut [u16]</code> slice.\nGet atomic access to a <code>&amp;mut [i32]</code> slice.\nGet atomic access to a <code>&amp;mut [u32]</code> slice.\nGet atomic access to a <code>&amp;mut [i64]</code> slice.\nGet atomic access to a <code>&amp;mut [u64]</code> slice.\nGet atomic access to a <code>&amp;mut [isize]</code> slice.\nGet atomic access to a <code>&amp;mut [usize]</code> slice.\nCreates a new <code>AtomicBool</code> from a pointer.\nCreates a new <code>AtomicPtr</code> from a pointer.\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nCreates a new reference to an atomic integer from a …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns a mutable reference to the underlying <code>bool</code>.\nReturns a mutable reference to the underlying pointer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nReturns a mutable reference to the underlying integer.\nGets non-atomic access to a <code>&amp;mut [AtomicBool]</code> slice.\nGets non-atomic access to a <code>&amp;mut [AtomicPtr]</code> slice.\nGet non-atomic access to a <code>&amp;mut [AtomicI8]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU8]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI16]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU16]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI32]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU32]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicI64]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicU64]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicIsize]</code> slice\nGet non-atomic access to a <code>&amp;mut [AtomicUsize]</code> slice\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nConsumes the atomic and returns the contained value.\nLoads a value from the bool.\nLoads a value from the pointer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nLoads a value from the atomic integer.\nCreates a new <code>AtomicBool</code>.\nCreates a new <code>AtomicPtr</code>.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nCreates a new atomic integer.\nSignals the processor that it is inside a busy-wait …\nStores a value into the bool.\nStores a value into the pointer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the atomic integer.\nStores a value into the bool, returning the previous value.\nStores a value into the pointer, returning the previous …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nStores a value into the atomic integer, returning the …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThis <code>sync_channel</code>’s receiving half has disconnected, so …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nThe data could not be sent on the <code>sync_channel</code> because it …\nAn owning iterator over messages on a <code>Receiver</code>, created by …\nAn iterator over messages on a <code>Receiver</code>, created by <code>iter</code>.\nThe receiving half of Rust’s <code>channel</code> (or <code>sync_channel</code>) …\nAn error returned from the <code>recv</code> function on a <code>Receiver</code>.\nThis enumeration is the list of possible errors that made …\nAn error returned from the <code>Sender::send</code> or <code>SyncSender::send</code>\nThe sending-half of Rust’s asynchronous <code>channel</code> type.\nThe sending-half of Rust’s synchronous <code>sync_channel</code> type.\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nAn iterator that attempts to yield all pending values for …\nThis enumeration is the list of the possible reasons that …\nThis enumeration is the list of the possible error …\nCreates a new asynchronous channel, returning the …\nClone a sender to send to other threads.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>RecvError</code> into a <code>TryRecvError</code>.\nReturns the argument unchanged.\nConverts a <code>RecvError</code> into a <code>RecvTimeoutError</code>.\nReturns the argument unchanged.\nConverts a <code>SendError&lt;T&gt;</code> into a <code>TrySendError&lt;T&gt;</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator that will block waiting for messages, …\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nAttempts to wait for a value on this receiver, returning …\nAttempts to send a value on this channel, returning it …\nSends a value on this synchronous channel.\nCreates a new synchronous, bounded channel. All data sent …\nReturns an iterator that will attempt to yield all pending …\nAttempts to return a pending value on this receiver …\nAttempts to send a value on this channel without blocking.\nDetermines whether the current thread is unwinding because …\nA <code>Duration</code> type to represent a span of time, typically …\nAn error which can be returned when converting a …\nAn identifier used to match public keys against sr25519 …\nAn Schnorrkel/Ristretto x25519 (“sr25519”) key pair.\nAn Schnorrkel/Ristretto x25519 (“sr25519”) public key.\nAn Schnorrkel/Ristretto x25519 (“sr25519”) signature.\nSchnorrkel VRF related types and operations.\nVRF input.\nVRF output type suitable for schnorrkel operations.\nVRF proof type suitable for schnorrkel operations.\nVRF input ready to be used for VRF sign and verify …\nVRF signature data\nTranscript ready to be used for VRF related operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMap transcript to <code>VrfSignData</code>.\nGenerate output bytes from the given VRF configuration.\nBuild a new transcript instance.\nBuild a new instance ready to be used for VRF signer and …\nVRF output.\nVRF proof.\nAdd some extra data to be signed.\nInformation related to a child state.\nA child trie of default type.\nType of child. It does not strictly define different child …\nThis is the one used by default.\nIf runtime module ensures that the child key is a unique …\nStorage key of a child trie, it contains the prefix to the …\nDifferent possible state version.\nStruct containing data needed for a storage.\nStorage change set\nChild trie storage data.\nStorage data associated to a <code>StorageKey</code>.\nStorage key.\nMap of data to use in a storage, it is a collection of …\nThreshold size to start using trie value nodes in state.\nStorage key with read/write tracking information.\nOld state version, no value nodes.\nNew state version can use value nodes.\nAdd a storage read to this key.\nAdd a storage write to this key.\nBlock hash\nA list of changes\nAssociated child info for a child trie.\nReturns the type for this child info.\nChildren trie storage data. Key does not include prefix, …\nChild data for storage.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nTransform a prefixed key into a tuple of the child type …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCheck if this key has been “read”, i.e. it exists in …\nCheck if this key has been “written”, i.e. a new value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet inner key, this should only be needed when writing …\nReturns a the full location in the direct parent of this …\nReturns byte sequence (keyspace) that can be use by …\nCreate a default <code>TrackedStorageKey</code>\nCreate a prefixed storage key from its byte array …\nTry to get a child type from its <code>u32</code> representation.\nInstantiates child information for a default child trie of …\nSame as <code>new_default</code> but with <code>Vec&lt;u8&gt;</code> as input.\nCreate a prefixed storage key reference.\nReturns the location reserved for this child trie in their …\nReturn a the full location in the direct parent of this …\nReturns a reference to the location in the direct parent of\nTop trie storage data.\nTry to update with another instance, return false if both …\nList of all well known keys and prefixes in storage.\nWhitelist this key.\nPrefix of child storage keys.\nWasm code of the runtime.\nPrefix of the default child storage keys in the top trie.\nCurrent extrinsic index (u32) is stored under this key.\nNumber of wasm linear memory pages required for execution …\nCurrent intra-block entropy (a universally unique <code>[u8; 32]</code> …\nWhether a key is a child storage key.\nWhether a key is a default child storage key.\nReturns if the given <code>key</code> starts with …\nKey type for generic Bandersnatch key.\nKey type for generic BLS12-377 key.\nKey type for generic BLS12-381 key.\nKey type for generic ECDSA key.\nKey type for (ECDSA,BLS12-377) key pair\nKey type for generic Ed25519 key.\nKey type for generic Sr25519 key.\nA task executor that can be used in tests.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCreate a new instance of <code>Self</code>.\nThe context in which a call is done.\nCode execution engine.\nCould not find the <code>:code</code> in the externalities while …\nExternalities error type.\nThe Substrate externalities.\nExtension for the <code>Externalities</code> trait.\nSomething that can fetch the runtime <code>:code</code>.\nType that implements <code>FetchRuntimeCode</code> and always returns …\nThe call is happening in some offchain context.\nThe call is happening in some on-chain context like …\nA trait that allows reading version information from the …\nAn extension that provides functionality to read version …\nThe Wasm code of a Substrate runtime.\nSomething that can spawn essential tasks (blocking and …\nSomething that can spawn tasks (blocking and non-blocking) …\nWrapper to use a <code>u8</code> slice or <code>Vec</code> as <code>FetchRuntimeCode</code>.\nCall a given method in the runtime.\nRead child runtime storage.\nGet child storage value hash.\nGet the trie root of a child storage map.\nClear child storage entries which keys are start with the …\nClear a child storage entry (<code>key</code>) of current contract …\nClear storage entries which keys are start with the given …\nClear a storage entry (<code>key</code>) of current contract being …\nThe code fetcher that can be used to lazily fetch the code.\n…\nDeregister and drop extension of <code>T</code> type.\nCreate an empty instance.\nWhether a child storage entry exists.\nWhether a storage entry exists.\nTries to find a registered extension and returns a mutable …\nFetch the runtime <code>:code</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\n…\n…\nThe hash of <code>code</code>.\nThe optional heap pages this <code>code</code> should be executed with.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClear an entire child storage.\nCreates a new instance of the extension given a version …\nReturns the key immediately following the given key, if it …\nReturns the key immediately following the given key, if it …\nSet or clear a child storage entry.\nSet or clear a storage entry (<code>key</code>) of current contract …\n…\nReads the runtime version information from the given wasm …\n…\nRegister extension <code>ext</code>.\n…\nSet child storage entry <code>key</code> of current contract being …\nWrite a key value pair to the offchain storage database.\nSet storage entry <code>key</code> of current contract being called …\n…\nSpawn the given non-blocking future.\nSpawn the given blocking future.\nSpawn the given non-blocking future.\nSpawn the given blocking future.\nRead runtime storage.\nAppend storage item.\nCommit the last transaction started by …\nGet storage value hash.\nIndex specified transaction slice and store it.\nRenew existing piece of transaction storage.\nRollback the last transaction started by …\nGet the trie root of the current storage map.\nStart a new nested transaction.\n…\nLittle-endian large integer type 256-bit unsigned integer.\nLittle-endian large integer type 512-bits unsigned integer.\nThe accuracy of this type.\nAn opaque 32-byte cryptographic identifier.\nIts a 20 byte representation.\nIt’s a 32 byte representation.\nSignature verify that can work with any known signature …\nThe result of applying of an extrinsic.\nSame as <code>ApplyExtrinsicResult</code> but augmented with …\nAn arithmetic error.\nAn arithmetic error.\nArithmetic errors.\nA bad origin.\nA bad origin.\nAccount cannot exist with the funds that would be given.\nAccount cannot receive the assets.\nThe borrowed mode that wraps a <code>&amp;&#39;static str</code>.\nSomething that is bound to a fixed <code>RuntimeAppPublic</code>.\nA bounded map based on a B-Tree.\nA bounded set based on a B-Tree.\nA bounded slice.\nA bounded vector.\nSomething that can build the genesis storage of a module.\nComplex storage builder stuff.\nAccount cannot be created.\nAccount cannot be created for a held balance.\nFailed to lookup some data.\nFailed to lookup some data.\nCommit the transaction.\nA message from the runtime to the consensus engine. This …\nConsensus engine unique ID.\nAt least one consumer is remaining so the account cannot …\nAt least one consumer is remaining so the account cannot …\nThe state is corrupt; this is generally not going to fix …\nThe state is corrupt; this is generally not going to fix …\nType which has a particular kind of crypto associated with …\nAn identifier for a specific cryptographic algorithm used …\nPrecision of this fixed point implementation. It should be …\nA <strong>data structure</strong> that can be deserialized from any data …\nA data structure that can be deserialized without …\nGeneric header digest.\nDigest item that is able to encode/decode ‘system’ …\nReason why a dispatch call failed.\nResult of a <code>Dispatchable</code> which contains the <code>DispatchResult</code> …\nThis type specifies the outcome of dispatching a call to a …\nThis is the legacy return type of <code>Dispatchable</code>. It is …\nReturn type of a <code>Dispatchable</code> which contains the …\nDivision by zero.\nAn ECDSA/SECP256k1 signature.\nAn SECP256k1/ECDSA identity (actually, the Blake2 hash of …\nAn Ed25519 signature.\nAn Ed25519 identity.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nThe encoded justification specific to a consensus engine.\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nContains the error value\nResources exhausted, e.g. attempt to read/write data which …\nResources exhausted, e.g. attempt to read/write data which …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nSomething that implements a decimal fixed point number.\nInteger types that can be used to interact with …\nA fixed point number representation in the range. <em>Fixed </em>…\nA fixed point number representation in the range. <em>Fixed </em>…\nFunds exist but are frozen.\nFunds are unavailable.\nAn identifier for this application-specific key type.\nIt’s an account ID (pubkey).\nIt’s an account index.\nThe underlying data type used for this fixed point number.\nThe data type used to build this per-thingy.\nGet the inner type of a <code>PerThing</code>.\nAn abstraction over justification for a block’s validity …\nCollection of justifications for a given block, multiple …\nAn identifier for a type of cryptographic key.\nA value of type <code>L</code>.\nToo many transactional layers have been spawned.\nThe number of bytes of the module-specific <code>error</code> field …\nA custom error in a module.\nA custom error in a module.\nReason why a pallet call failed.\nA multi-format address wrapper for on-chain accounts.\nSignature verify that can work with any known signature …\nPublic key for any known crypto algorithm.\nA transactional layer was expected, but does not exist.\nThere are no providers so the account cannot be created.\nThere are no providers so the account cannot be created.\nWithdrawal would cause unwanted loss of account.\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nContains the success value\nSome part of the balance gives the only provider reference …\nSimple blob to hold an extrinsic without committing to its …\nSome error occurred.\nSome other thing. Unsupported and experimental.\nSome error occurred.\nOverflow.\nThe owned mode that wraps a <code>String</code>.\nThe pair key type of this crypto.\nSomething that implements a fixed point ration with an …\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA fixed point representation of a number in the range [0, 1…\nA pre-runtime digest.\nThe <code>RuntimeAppPublic</code> this type is bound to.\nA wrapper for any rational number with a 128 bit numerator …\nIt’s some arbitrary raw bytes.\nA value of type <code>R</code>.\nRollback the transaction.\nRoot origin is not allowed.\nRoot origin is not allowed.\nThe rounding method to use for unsigned quantities.\nRuntime interface for an application’s public key.\nAn indication for the light clients that the runtime …\nA string that wraps a <code>&amp;&#39;static str</code> in the runtime and …\nIndicates if this fixed point implementation is signed or …\nConvenience type to work around the highly unergonomic …\nSaturating arithmetic operations, returning maximum or …\nPut a Seal on it. This is only used by native code, and is …\nA <strong>data structure</strong> that can be serialized into any data …\nThe signature that will be generated when signing with the …\nAn Sr25519 signature.\nAn Sr25519 identity.\nDifferent possible state version.\nStruct containing data needed for a storage.\nChild trie storage data.\nSimple 4 byte identifier.\nAn error to do with tokens.\nAn error to do with tokens.\nDescription of what went wrong when trying to complete an …\nThere are too many consumers so the account cannot be …\nThere are too many consumers so the account cannot be …\nDescribes on what should happen with a storage transaction.\nThe number of transactional layers has been reached, or we …\nThe number of transactional layers has been reached, or we …\nErrors related to transactional storage layers.\nThe error type used as return type in try runtime hooks.\nProvide a simple 4 byte identifier for a type.\nSome resource (e.g. a preimage) is unavailable right now. …\nSome resource (e.g. a preimage) is unavailable right now. …\nUnderflow.\nThe asset in question is unknown.\nOperation is not supported by the asset.\nA data type larger than <code>Self::Inner</code>, used to avoid …\nGet the upper type of a <code>PerThing</code>.\nOld state version, no value nodes.\nNew state version can use value nodes.\nA weakly bounded vector.\nPrecision of this fixed point implementation.\nAdd a value and return the result.\nAdd a value and return the result.\nAdd a value and return the result.\nAdd a value and return the result.\nReturns all public keys for this application in the …\nAppend a justification. Returns false if a justification …\nReturn a <code>BoundedSlice</code> with the content and bound of <code>Self</code>.\nReturns <code>Some</code> if this entry is the <code>Consensus</code> entry.\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nReturns Some if <code>self</code> is a <code>DigestItem::Other</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nReturns <code>Some</code> if this entry is the <code>PreRuntime</code> entry.\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nReturns <code>Some</code> if this entry is the <code>Seal</code> entry.\nChecks that <code>$x</code> is equal to <code>$y</code> with an error rate of <code>$error</code>.\nSame as <code>assert_eq_error_rate</code>, but intended to be used with …\nAssimilate the storage for this module into pre-existing …\nInfinite precision unsigned integer for substrate runtime.\nGet the bound of the type in <code>usize</code>.\nGet the bound of the type in <code>usize</code>.\nGet the bound of the type in <code>usize</code>.\nGet the bound of the type in <code>usize</code>.\nBuild a bounded btree-map from the given literals.\nSame as <code>Vec::resize</code>, but if <code>size</code> is more than <code>Self::bound</code>, …\nBuild a bounded vec from the given literals.\nCreate the module genesis storage into the given <code>storage</code> …\nBuild the storage out of this builder.\nReturns the smallest integer greater than or equal to a …\nAddition. Simply tries to unify the denominators and add …\nChecked division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCreates <code>self</code> from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nChecked multiplication for integer type <code>N</code>. Equal to …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nDivide by another value with custom rounding, returning …\nSubtraction. Simply tries to unify the denominators and …\nAssociated child info for a child trie.\nChildren trie storage data. Key does not include prefix, …\nClears the map, removing all elements.\nClears the set, removing all elements.\nExactly the same semantics as <code>Vec::clear</code>.\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nTry to match this to a <code>Self::Consensus</code>, check <code>id</code> matches …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nDivide by another value, returning <code>None</code> in the case of an …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value, returning <code>None</code> in the case of …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nMultiply by another value with custom rounding, returning …\nGet a conversion of the first digest item that …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nCalls a given macro a number of times with a set of fixed …\nCreate a const <code>RuntimeString</code>.\nProvides some utilities to define a piecewise linear …\nReturn the denominator.\nChild data for storage.\nConsume self and return the number of parts per thing.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nSee <code>PerThing::deconstruct</code>.\nConsume self and return the number of parts per thing.\nDeserialize this value from the given Serde deserializer.\nDivide by a value and return the result.\nDivide by a value and return the result.\nDivide by a value and return the result.\nDivide by a value and return the result.\nExact same semantics as <code>Vec::drain</code>.\nReturns a ‘referencing view’ for this digest item.\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nModule specific error value.\nThe actual <code>DispatchResult</code> indicating whether the dispatch …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the largest integer less than or equal to a number.\nCreate <code>Self</code> from <code>t</code> without any checks. Logs warnings if …\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>element</code> into <code>self</code> retaining all …\nForces the insertion of <code>s</code> into <code>self</code> truncating first if …\nConvenience macro to use the format! interface to get a …\nReturns the fractional part.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild from a raw <code>n/d</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an encoded extrinsic to an <code>OpaqueExtrinsic</code>.\nConverts a fraction into <code>Self</code>.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nConvert from a <code>float</code> value.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nNOTE: saturate to 0 or 1 if x is beyond <code>[0, 1]</code>\nSee <code>PerThing::from_float</code>.\nSame as <code>Self::from_float</code>.\nBuilds this type from an integer number.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nCreate a new instance from the given <code>inner</code> value.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nBuild this type from a number of parts per thing.\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nBuild this type from a number of parts per thing.\nFrom an explicitly defined number of parts per maximum of …\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nConvert from a <code>Perbill</code> value.\nBuild this type from a percent. Equivalent to …\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 100</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nConverts a percent into <code>Self</code>. Equal to <code>x / 1000</code>.\nApproximate the fraction <code>p/q</code> into a per-thing fraction. …\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nCalculate an approximation of a rational.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSame as <code>Self::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nSee <code>PerThing::from_rational</code>.\nApproximate the fraction <code>p/q</code> into a per-thing fraction.\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nCalculate an approximation of a rational with custom …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nReturns the value for <code>Rounding</code> which would give the same …\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nCreates self from a <code>u32</code>.\nBuild from a raw <code>n/d</code>. This could lead to / 0 if not …\nGenerate a public/private pair with an optional <code>seed</code> and …\nGeneric implementations of <code>crate::traits::Header</code>, …\nReturn the encoded justification for the given consensus …\nReturn a mutable reference to the value corresponding to …\nExactly the same semantics as <code>slice::get_mut</code>.\nExactly the same semantics as <code>slice::get_mut</code>.\nSome helper functions to work with 128bit numbers. Note …\nImplement <code>OpaqueKeys</code> for a described struct.\nModule index, matching the metadata module index.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger division with another value, rounding down.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nInteger multiplication with another value, saturating at 1.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nAttempt to convert into a <code>PerThing</code>. This will always …\nConsumes <code>self</code> and returns the inner raw value.\nExtract the value of an either over two equivalent types.\nReturn the instance’s inner value.\nConsume self, and return the inner <code>BTreeMap</code>.\nConsume self, and return the inner <code>BTreeSet</code>.\nReturn the instance’s inner value.\nConsume self, and return the inner <code>Vec</code>. Henceforth, the …\nConsume self, and return the inner <code>Vec</code>. Henceforth, the …\nReturn the instance’s inner value.\nReturn the instance’s inner value.\nConvert into the inner type.\nConvert the inner value to an iterator.\nReturn a copy of the encoded justification for the given …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nConvert into a <code>Perbill</code> value. Will saturate if above one …\nReturns true of this collection is full.\nReturn true if the value is the <code>Left</code> variant.\nReturns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number …\nChecks if the number is one.\nReturn <code>true</code> if this is one.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nSee <code>PerThing::is_one</code>.\nReturns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number …\nReturn true if the value is the <code>Right</code> variant.\nReturn <code>true</code> if this is nothing.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nSee <code>PerThing::is_zero</code>.\nIf it is zero or not\nBorrow the inner value as an iterator.\nReturn an iterator over the justifications.\nMutably borrow the inner value as an iterator.\nGets a mutable iterator over the entries of the map, …\nExactly the same semantics as <code>slice::iter_mut</code>.\nExactly the same semantics as <code>slice::last_mut</code>.\nA saturating add that assumes <code>self</code> and <code>other</code> have the same …\nA saturating subtraction that assumes <code>self</code> and <code>other</code> have …\nGet the least common divisor of <code>self</code> and <code>other</code>.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn the part left when <code>self</code> is saturating-subtracted …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nRuntime types that existed in old API versions.\nReturn the next lower value to <code>self</code> or <code>self</code> if it is …\nGet reference to the first digest item that matches the …\nGet reference to all digest items.\nA list of logs in the digest.\nMap <code>f</code> over the contained value and return the result in the\nConsume the map, applying <code>f</code> to each of it’s values and …\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nOptional error message.\nCreate a <code>Morph</code> and/or <code>TryMorph</code> impls with a simple …\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nMultiply by a value and return the result.\nMultiplication that always rounds the result up to a whole …\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nSee <code>PerThing::mul_ceil</code>.\nMultiplication that always rounds down to a whole number. …\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nSee <code>PerThing::mul_floor</code>.\nReturn the numerator.\nNegate the value.\nNegate the value.\nNegate the value.\nNegate the value.\nCreate a new <code>BoundedBTreeMap</code>.\nCreate a new <code>BoundedBTreeSet</code>.\nCreate <code>Self</code> with no items.\nCreate a new instance from its raw inner byte value.\nA collection of higher lever helpers for offchain calls.\nEquivalent to <code>Self::from_parts(Self::ACCURACY)</code>.\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nSee <code>PerThing::one</code>\nOne\nReturn the next higher value to <code>self</code> or <code>self</code> if it is …\nExactly the same semantics as <code>Vec::pop</code>.\nPop a digest item.\nAdditional information about the <code>Dispatchable</code> which is …\nTry to match this to a <code>Self::PreRuntime</code>, check <code>id</code> matches …\nPrint something that implements <code>Printable</code> from the runtime.\nPush new digest item.\nTakes the reciprocal (inverse). Equal to <code>1 / self</code>.\nRemove a key from the map, returning the value at the key …\nRemove an item from the set, returning whether it was …\nExactly the same semantics as <code>Vec::remove</code>.\nExactly the same semantics as <code>Vec::remove</code>.\nRemove the encoded justification for the given consensus …\nRemove a key from the map, returning the value at the key …\nExactly the same semantics as <code>BTreeMap::retain</code>.\nExactly the same semantics as <code>Vec::retain</code>.\nExactly the same semantics as <code>Vec::retain</code>.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nReturns the number rounded to the nearest integer. Rounds …\nA logger that can be used to log from the runtime.\nConvert from a value of <code>T</code> into an equivalent instance of …\nConsume self to return an equivalent value of <code>T</code>.\nSaturating absolute value.\nIncrement self by some <code>amount</code>, saturating.\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nSaturating addition. Compute <code>self + rhs</code>, saturating at the …\nDecrement self by one, saturating at zero.\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division. Compute <code>self / rhs</code>, saturating at one …\nSaturating division for integer type <code>N</code>. Equal to <code>self / d</code>.\nCreates self from an integer number <code>int</code>.\nCreates <code>self</code> from a rational number. Equal to <code>n / d</code>.\nIncrement self by one, saturating.\nDecrement self by one, saturating at zero.\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiply. Compute <code>self * rhs</code>, saturating at the …\nSaturating multiplication for integer type <code>N</code>, adding the …\nSaturating multiplication for integer type <code>N</code>. Equal to …\nIncrement self by one, saturating at the numeric bounds …\nSaturating exponentiation. Compute <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSee <code>PerThing::saturating_reciprocal_mul</code>.\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSee <code>PerThing::saturating_reciprocal_mul_ceil</code>.\nSaturating multiplication by the reciprocal of <code>self</code>.\tThe …\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nSee <code>PerThing::saturating_reciprocal_mul_floor</code>.\nDecrement self by some <code>amount</code>, saturating at zero.\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nSaturating subtraction. Compute <code>self - rhs</code>, saturating at …\nTry to match this to a <code>Self::Seal</code>, check <code>id</code> matches and …\nSerialize this value into the given Serde serializer.\nSign the given message with the corresponding private key …\nMove the position of an item from one location to another …\nExactly the same semantics as <code>slice::sort</code>.\nExactly the same semantics as <code>slice::sort_by</code>.\nExactly the same semantics as <code>slice::sort_by_key</code>.\nTake the square root of a positive value.\nTake the square root of a positive value.\nTake the square root of a positive value.\nTake the square root of a positive value.\nReturn the product of multiplication of this value by …\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nSee <code>PerThing::square</code>.\nIf defined, values in state of size bigger or equal to …\nUtility function to declare string literals backed by an …\nReturn the same error but without the attached message.\nSubtract a value and return the result.\nSubtract a value and return the result.\nSubtract a value and return the result.\nSubtract a value and return the result.\nExactly the same semantics as <code>slice::swap_remove</code>.\nExactly the same semantics as <code>Vec::swap_remove</code>.\nRemoves and returns the value in the set, if any, that is …\nTesting utilities.\nConvert <code>self</code> to a similar rational number where …\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nConvert into a <code>float</code> value.\nReturns <code>Self</code> as raw vec.\nTop trie storage data.\nPrimitives for the runtime modules.\nTransaction validity interface.\nReturns the integer part.\nExactly the same semantics as <code>Vec::truncate</code>.\nConsume and truncate the vector <code>v</code> in order to create a new …\nCreate an instance from the first elements of the given …\nExactly the same semantics as <code>Vec::append</code>, but returns an …\nReturns the opaque data contained in the item if <code>Some</code> if …\nExactly the same semantics as <code>Vec::extend</code>, but returns an …\nExactly the same semantics as <code>BTreeMap::insert</code>, but …\nExactly the same semantics as <code>BTreeSet::insert</code>, but …\nExactly the same semantics as <code>Vec::insert</code>, but returns an …\nExactly the same semantics as <code>Vec::insert</code>, but returns an …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nAttempt to convert into a <code>PerThing</code>. This will succeed iff …\nReturn the next lower value to <code>self</code> or an error with the …\nConsume the map, applying <code>f</code> to each of it’s values as …\nConsumes self and mutates self via the given <code>mutate</code> …\nConsumes self and mutates self via the given <code>mutate</code> …\nConsumes self and mutates self via the given <code>mutate</code> …\nConsumes self and mutates self via the given <code>mutate</code> …\nReturn the next higher value to <code>self</code> or an error with the …\nExactly the same semantics as <code>Vec::push</code>, but returns an <code>Err</code>…\nExactly the same semantics as <code>Vec::push</code>, but returns an <code>Err</code>…\nCompute the square root, rounding as desired. If it …\nCompute the square root, rounding as desired. If it …\nCompute the square root, rounding as desired. If it …\nCompute the square root, rounding as desired. If it …\nReturns the data contained in the item if <code>Some</code> if this …\nReturns the left value\nReturns the right value\nVerify that the given signature matches the given message …\nVerify a signature on an encoded value in a lazy manner. …\nPre-allocate <code>capacity</code> items in self.\nAllocate self with the maximum possible capacity.\nEquivalent to <code>Self::from_parts(0)</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nSee <code>PerThing::zero</code>.\nZero.\nApplication-specific cryptographic object.\nApplication-specific key pair.\nApplication-specific public key.\nApplication-specific signature.\nSomething that is bound to a fixed <code>RuntimeAppPublic</code>.\nTrait used for types that are really just a fixed-length …\nIdentifier of the crypto type of this application-specific …\nType which has a particular kind of crypto associated with …\nAn identifier for a specific cryptographic algorithm used …\nUsed for immutable dereferencing operations, like <code>*v</code>.\nDerivable key trait.\nAn error when deriving a key.\nA since derivation junction description. It is the single …\nThe wrapped type which is just a plain instance of <code>Pair</code>.\nThe wrapped type which is just a plain instance of <code>Public</code>.\nThe wrapped type which is just a plain instance of …\nHard (“hardened”) derivation. Public keys do not have …\nIdentifier for application-specific key type.\nAn identifier for this application-specific key type.\nThe inner type it is wrapping.\nThe overall format was invalid (e.g. the seed phrase …\nThe supplied password was invalid.\nThe derivation path was invalid (e.g. contains soft …\nThe seed phrase provided is not a valid BIP39 phrase.\nThe seed is invalid (bad content).\nThe seed has an invalid length.\nOne type is wrapped by another.\nAn identifier for a type of cryptographic key.\nThe “length” of the values of this type, which is …\nType which implements Hash in std, not when no-std (std …\nTrait suitable for typical cryptographic PKI key pair type.\nThe corresponding key pair type in this application scheme.\nThe pair key type of this crypto.\nTrait suitable for typical cryptographic key public type.\nThe corresponding public key type in this application …\nThe <code>RuntimeAppPublic</code> this type is bound to.\nThe type which is used to encode a public key.\nRuntime interface for an application’s public key.\nRuntime interface for a public key.\nAn error with the interpretation of a secret.\nThe type used to (minimally) encode the data required to …\nThe corresponding signature type in this application …\nThe signature that will be generated when signing with the …\nThe signature that will be generated when signing with the …\nThe type used to represent a signature. Can be created …\nSoft (vanilla) derivation. Public keys have a …\nA soft key was found in the path (and is unsupported).\nKey that can be encoded to/from SS58.\nThe resulting type after dereferencing.\nSimilar to <code>From</code>, except that the onus is on the part of …\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nOpposite of <code>IsWrappedBy</code> - denotes a type which is a simple …\nReturns all public keys for the given key type in the …\nReturns all public keys for this application in the …\nReturns a reference to the underlying allocator.\nDeclares <code>Public</code>, <code>Pair</code> and <code>Signature</code> types which are …\nDeclares <code>Pair</code> type which is functionally equivalent to …\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nGet a reference to the inner type that is wrapped.\nReturns an unsafe mutable pointer to the vector’s …\nExtracts a mutable slice of the entire vector.\nReturns a raw pointer to the vector’s buffer, or a …\nReturn a slice filled with raw data.\nExtracts a slice containing the entire vector.\nReturns the total number of elements the vector can hold …\nClears the vector, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates an empty <code>Vec&lt;T&gt;</code>.\nDereferences the value.\nDerive a child key from a series of given junctions.\nDerive a child key from a series of given junctions.\nRemoves the specified range from the vector in bulk, …\nEcdsa crypto types.\nEd25519 crypto types.\nSCALE encode this type to bytes, possibly with the help of …\nClones and appends all elements in a slice to the <code>Vec</code>.\nCopies elements from <code>src</code> range to the end of the vector.\nCreates an iterator which uses a closure to determine if …\nA format filterer, can be used to ensure that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a clone-on-write slice into a vector.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.\nConverts a boxed slice into a vector by transferring …\nAllocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nConverts a <code>CString</code> into a Vec&lt;u8&gt;.\nReturns the argument unchanged.\nTurns a non-empty list into a Vec.\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nReturns the KeyPair from the English BIP39 seed <code>phrase</code>, or …\nCreates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGenerate new key pair from the provided <code>seed</code>.\nMake a new key pair from secret seed material. The slice …\nA new instance from the given slice that should be …\nSome if the string is a properly encoded SS58Check address.\nSome if the string is a properly encoded SS58Check address.\nSome if the string is a properly encoded SS58Check …\nInterprets the string <code>s</code> in order to generate a key pair.\nInterprets the string <code>s</code> in order to generate a key Pair. …\nSome if the string is a properly encoded SS58Check …\nGenerate new secure (random) key pair.\nGenerate a public/private pair for the given key type with …\nGenerate a public/private pair with an optional <code>seed</code> and …\nGenerate new secure (random) key pair and provide the …\nCreate a new hard (hardened) DeriveJunction from a given, …\nConsume self to return a hard derive junction with the …\nGet a reference to the inner junction id.\nInserts an element at position <code>index</code> within the vector, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nCreates a consuming iterator, that is, one that moves each …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nReturns <code>true</code> if the vector contains no elements.\nReturn <code>true</code> if the junction is hard.\nReturn <code>true</code> if the junction is soft.\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nReturns the number of elements in the vector, also …\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nRemoves the last element from a vector and returns it, or …\nRemoves and returns the last element in a vector if the …\nGet the public key.\nAppends an element to the back of a collection.\nAppends an element if there is sufficient spare capacity, …\nRemoves and returns the element at position <code>index</code> within …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> more …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nForces the length of the vector to <code>new_len</code>.\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of the vector as much as possible.\nSign the given message with the corresponding private key …\nSign the given message with the corresponding private key …\nSign a message.\nCreate a new soft (vanilla) DeriveJunction from a given, …\nConsume self to return a soft derive junction with the …\nReturns the remaining spare capacity of the vector as a …\nCreates a splicing iterator that replaces the specified …\nReturns vector content as a slice of <code>T</code>, along with the …\nSplits the collection into two at the given index.\nSr25519 crypto types.\nRemoves an element from the vector and returns it.\nReturns <code>Self</code> as raw vec.\nReturns <code>Self</code> as raw vec.\nReturn a vec filled with raw data.\nReturn a <code>Vec&lt;u8&gt;</code> filled with raw data.\nReturn the ss58-check string for this key.\nReturn the ss58-check string for this key.\nShortens the vector, keeping the first <code>len</code> elements and …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nConvert from an instance of <code>T</code> to Self. This is not …\nConsume self to return the chain code.\nVerify that the given signature matches the given message …\nVerify that the given signature matches the given message …\nVerify a signature on a message. Returns true if the …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nGenerate the given code if the pair type is available.\nImplement bidirectional <code>From</code> and on-way <code>AsRef</code>/<code>AsMut</code> for …\n“Best effort” zeroization for <code>Vec</code>.\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nAn identifier used to match public keys against ecdsa keys\nThe byte length of public key\nA key pair.\nThe ECDSA compressed public key.\nThe byte length of signature\nA signature (a 512-bit value, plus 8 bits for recovery ID).\nDerive a child key from a series of given junctions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from the given full public key.\nExactly as <code>from_string</code> except that if no matches are found …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nA new instance from the given 33-byte <code>data</code>.\nA new instance from the given 65-byte <code>data</code>.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material. The slice …\nA new instance from the given slice that should be 65 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic public key type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic key pair type.\nGet the public key.\nRecover the public key from this signature and a message.\nRecover the public key from this signature and a …\nGet the seed for this key.\nSign a message.\nSign a pre-hashed message\nReturn a vec filled with raw data.\nVerify a signature on a message. Returns true if the …\nVerify a signature on a message. Returns true if the …\nVerify a signature on a pre-hashed message. Return <code>true</code> if …\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nAn identifier used to match public keys against ed25519 …\nA key pair.\nA public key.\nA signature (a 512-bit value).\nReturn a slice filled with raw data.\nDerive a child key from a series of given junctions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA new instance from an H256.\nA new instance from an H512.\nExactly as <code>from_string</code> except that if no matches are found …\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nA new instance from the given 32-byte <code>data</code>.\nA new instance from the given 64-byte <code>data</code>.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from secret seed material. The slice …\nA new instance from the given slice that should be 64 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic public key type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic key pair type.\nGet the public key.\nGet the seed for this key.\nSign a message.\nReturn a vec filled with raw data.\nVerify a signature on a message.\nA generic <code>AppPublic</code> wrapper type over $pair crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nA generic <code>AppPublic</code> wrapper type over $public crypto; this …\nAn identifier used to match public keys against sr25519 …\nAn Schnorrkel/Ristretto x25519 (“sr25519”) key pair.\nAn Schnorrkel/Ristretto x25519 (“sr25519”) public key.\nAn Schnorrkel/Ristretto x25519 (“sr25519”) signature.\nReturn a slice filled with raw data.\nDerive a child key from a series of given junctions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA new instance from an H256.\nA new instance from an H512.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nA new instance from the given 32-byte <code>data</code>.\nA new instance from the given 64-byte <code>data</code>.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nMake a new key pair from raw secret seed material.\nA new instance from the given slice that should be 64 …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into wrapped generic public key type.\nConvert into wrapped generic signature type.\nConvert into wrapped generic key pair type.\nGenerate output bytes from the given VRF configuration.\nGenerate output bytes from the given VRF configuration.\nGet the public key.\nVerify a signature on a message. Returns <code>true</code> if the …\nSimple wrapper around an infinitely large integer, …\nRepresentation of two limbs.\nRepresentation of a single limb.\nAdds <code>self</code> with <code>other</code>. self and other do not have to have …\nAssumed as a given primitive.\nA naive getter for limb at <code>index</code>. Note that the order is …\nDivides an <code>n + m</code> limb self by a <code>n</code> limb <code>other</code>. The result …\nDivides <code>self</code> by a single limb <code>other</code>. This can be used in …\nReturns the argument unchanged.\nRaw constructor from custom limbs. If <code>limbs</code> is empty, …\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nA naive getter for limb at <code>index</code>. Note that the order is …\nCalls <code>U::from(self)</code>.\nNumber of limbs.\nZero-pad <code>self</code> from left to reach <code>size</code> limbs. Will not make …\nreturns the least significant limb of the number.\nStrips zeros from the left side (the most significant …\nreturns the most significant limb of the number.\nMultiplies n-limb number <code>self</code> with m-limb number <code>other</code>.\nAssumed as a given primitive.\nA naive setter for limb at <code>index</code>. Note that the order is …\nSplits a <code>Double</code> limb number into a tuple of two <code>Single</code> …\nSubtracts <code>other</code> from <code>self</code>. self and other do not have to …\nCreate a new instance with <code>size</code> limbs. This prevents any …\nA compact-encodable type that should be used as the …\nTrait that allows zero-copy read/write of value-references …\nCompact-encoded variant of T. This is more space-efficient …\nAllow foreign structs to be wrap in Compact\nDerive <code>parity_scale_codec::Compact</code> and …\nSomething that can return the compact encoded length for a …\nCompact-encoded variant of &amp;’a T. This is more …\nTypes that have a constant encoded length. This implies …\nTrait that allows zero-copy read of value-references from …\nDerive <code>parity_scale_codec::Decode</code> and for struct and enum.\nExtension trait to <code>Decode</code> that ensures that the given …\nA zero-sized type signifying that the decoding finished.\nTrait that allows the length of a collection to be read, …\nExtension trait to <code>Decode</code> for decoding with a maximum …\nTrait that allows zero-copy write of value-references to …\nDerive <code>parity_scale_codec::Encode</code> and …\nTrait that allows to append items to an encoded …\nSomething that can be encoded as a reference.\nA marker trait that tells the compiler that a type encode …\nError type.\nTrait that bound <code>EncodeLike</code> along with <code>Codec</code>. Usefull for …\nTrait that bound <code>EncodeLike</code> along with <code>Encode</code>. Usefull for …\nTrait that tells you if a given type can be …\nTrait that allows reading of data into a slice.\nWrapper that implements Input for any <code>Read</code> type.\nThe item that will be appended.\nTrait to allow itself to be serialised into a value which …\nTrait to allow itself to be serialised and prepended by a …\nItems implementing <code>MaxEncodedLen</code> have a statically known …\nDerive <code>parity_scale_codec::MaxEncodedLen</code> for struct and …\nShim type because we can’t do a specialised …\nTrait that allows writing of data.\nReference wrapper that implement encode like any type that …\nThe reference type that is used for encoding.\nThe compact type; this can be\nA wrapped type.\nA marker trait for types that can be created solely from …\nA marker trait for types that wrap other encodable type.\nAppend encoding of value to <code>Self</code>.\nAppend all items in <code>iter</code> to the given <code>self_encoded</code> …\nAscend to previous structure level when decoding. This is …\nAssert that the decoding has finished.\nChain error message with description.\nReturns the compact encoded length for the given value.\nAttempt to deserialise the value from input.\nDecode <code>Self</code> and consume all of the given input data.\nDecode <code>Self</code> and consume all of the given input data.\nDecode <code>Self</code> from the compact-decoded type.\nDecodes a given <code>T</code> from <code>Bytes</code>.\nAttempt to deserialize the value from input into a …\nDecode the vec (without a prepended len).\nDecode <code>Self</code> with the given maximum recursion depth and …\nDescend into nested reference when decoding. This is …\nConvert self to an owned vector.\nReturns the compact-encodable type.\nConvert self to a slice and append it to the destination.\nSCALE encode this type to bytes, possibly with the help of …\nReturns the fixed encoded size of the type.\nCalculates the encoded size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.")